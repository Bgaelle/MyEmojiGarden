{"version":3,"sources":["Garden.js","index.js"],"names":["Garden","props","getNumberOfEmojis","state","garden","filter","element","emoji","length","addPlant","growGarden","newGarden","find","setState","map","elem","setTimeout","deletePlant","id","class","className","this","onClick","React","Component","App","generateGarden","size","i","push","addGarden","newFarm","farm","SIZE_GARDEN","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iNAuFeA,E,kDAnFb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAURC,kBAAoB,WAIlB,OAHqB,EAAKC,MAAMC,OAAOC,QACrC,SAACC,GAAD,MAA+B,KAAlBA,EAAQC,SAEDC,QAfL,EAmBnBC,SAAW,WAGT,GAFA,EAAKC,aAED,EAAKR,oBAAsB,GAAI,CAEjC,IAAIS,EAAS,YAAO,EAAKR,MAAMC,QAE/BO,EAAUC,MAAK,SAACN,GAAD,MAA+B,KAAlBA,EAAQC,SAAcA,MAAQ,eAE1D,EAAKM,SAAS,CAAET,OAAQO,MA5BT,EAiCnBD,WAAa,WACX,IAAIC,EAAS,YAAO,EAAKR,MAAMC,QAC/BO,EAAUG,KAAI,SAACC,GACb,MAAmB,iBAAfA,EAAKR,MAAwBQ,EAAKR,MAAQ,eACtB,iBAAfQ,EAAKR,MAAwBQ,EAAKR,MAAQ,eACvCQ,EAAKR,SAEnB,EAAKM,SAAS,CAAET,OAAQO,IAGpB,EAAKR,MAAMC,OAAOI,OAAS,GAC7BQ,YAAW,WACT,EAAKN,eACJ,MA9CY,EAmDnBO,YAAc,SAACC,GACb,IAAIP,EAAS,YAAO,EAAKR,MAAMC,QAC/BO,EAAUO,GAAIX,MAAQ,GACtB,EAAKM,SAAS,CAAET,OAAQO,KApDxB,EAAKR,MAAQ,CAAEC,OAAQH,EAAMG,QAFZ,E,0CAyDnB,WAAU,IAAD,OACP,OACE,mCACA,yBAASe,MAAM,gBAAf,SACE,sBAAKC,UAAU,kBAAf,UACGC,KAAKlB,MAAMC,OAAOU,KAAI,SAACC,GACtB,OACE,wBAEEK,UAAU,OACVE,QAAS,kBAAM,EAAKL,YAAYF,EAAKG,KAHvC,SAKGH,EAAKR,OAJDQ,EAAKG,OAUlB,wBAAQC,MAAM,cAAcG,QAASD,KAAKZ,SAA1C,uC,GA5Eac,IAAMC,WCGrBC,E,kDACJ,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IAORyB,eAAiB,SAACC,GAEhB,IADA,IAAIhB,EAAY,GACPiB,EAAI,EAAGA,EAAID,EAAMC,IACxBjB,EAAUkB,KAAK,CAAEX,GAAIU,EAAGrB,MAAO,KAEjC,OAAOI,GAbU,EAiBnBmB,UAAY,SAACH,GACX,IAAII,EAAO,YAAO,EAAK5B,MAAM6B,MAC7BD,EAAQF,KAAK,EAAKH,eAAeC,IACjC,EAAKd,SAAS,CAAEmB,KAAMD,KAjBtB,EAAK5B,MAAQ,CAAE6B,KAAM,IACrB,EAAKC,YAAc,GAJF,E,0CAgCnB,WAAU,IAAD,OACP,OACE,qCACA,qBAAKd,MAAM,gBAAX,SACGE,KAAKlB,MAAM6B,KAAKlB,KAAI,SAACC,GAEpB,OAAO,cAAC,EAAD,CAAQX,OAAQW,SAMzB,wBAAQI,MAAM,YAAYG,QAAS,kBAAM,EAAKQ,UAAU,EAAKG,cAA7D,+B,GA7CUV,IAAMC,WAqDlBU,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,I","file":"static/js/main.213bc348.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nclass Garden extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { garden: props.garden };\n  }\n\n// 1er montage du composant\n  // componentDidUpdate() {\n  //   console.log(\"numberOfEmojis\", this.getNumberOfEmojis());\n  // }\n\n// fonction pour calculer le nbr d'emoji dans le tableau\n  getNumberOfEmojis = () => {\n    let numberOfEmojis = this.state.garden.filter(\n      (element) => element.emoji !== \"\"\n    );\n    return numberOfEmojis.length;\n  };\n\n    // Ajouter un emoji\n  addPlant = () => {\n    this.growGarden(); \n    // condition pour ajouter un emoji = tableau pas plein\n    if (this.getNumberOfEmojis() < 25) {\n      // New garden est un clone de garden pour modifier la valeur \n      let newGarden = [...this.state.garden]; \n       // Rechercher le 1er Ã©lÃ©ment qui correspond aux paramÃ¨tres, ici = case sans emoji\n      newGarden.find((element) => element.emoji === \"\").emoji = \"ðŸŒ±\"; \n      // Mise Ã  jour de garden avec son clone\n      this.setState({ garden: newGarden });\n    }\n  };\n\n  // Fonction pour faire pousser les plantes avec un timer \n  growGarden = () => {\n    let newGarden = [...this.state.garden];\n    newGarden.map((elem) => {\n      if (elem.emoji === \"ðŸŒ±\") return (elem.emoji = \"ðŸŒ¿\");\n      else if (elem.emoji === \"ðŸŒ¿\") return (elem.emoji = \"ðŸŒ²\");\n      else return elem.emoji;\n    });\n    this.setState({ garden: newGarden });\n\n    // Appel de setTimeout quand growGarden a Ã©tÃ© executÃ©  > 2000 = Ã  2sec\n    if (this.state.garden.length > 0) {\n      setTimeout(() => {\n        this.growGarden();\n      }, 2000);\n    }\n  };\n\n  // Delete une plante en cliquant sur sa case\n  deletePlant = (id) => {\n    let newGarden = [...this.state.garden];\n    newGarden[id].emoji = \"\";\n    this.setState({ garden: newGarden });\n  };\n\n  render() {\n    return (\n      <>\n      <section class=\"flexContainer\">\n        <div className=\"gardenContainer\">\n          {this.state.garden.map((elem) => {\n            return (\n              <button\n                key={elem.id}\n                className=\"cell\"\n                onClick={() => this.deletePlant(elem.id)} \n              >\n                {elem.emoji}\n              </button>\n            );\n          })}\n        {/* </div> */}\n        {/* <div class=\"Plant\"> */}\n        <button class=\"boutonPlant\" onClick={this.addPlant}>Plant an Emoji</button>\n        </div>\n        </section>\n      </>\n    );\n  }\n}\n\nexport default Garden;\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport Garden from \"./Garden\";\nimport \"./style.css\";\n\n// composant App\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // le composant farm embarque plusieurs garden\n    this.state = { farm: [] }; \n    this.SIZE_GARDEN = 25;\n  }\n\n  // crÃ©ation de garden\n  generateGarden = (size) => {\n    let newGarden = [];\n    for (let i = 0; i < size; i++) {\n      newGarden.push({ id: i, emoji: \"\" });\n    }\n    return newGarden;\n  };\n\n  // crÃ©ation d'un garden dans farm \n  addGarden = (size) => {\n    let newFarm = [...this.state.farm]; // > le clonage\n    newFarm.push(this.generateGarden(size)); // > la modif de la copie\n    this.setState({ farm: newFarm }); // > la mise Ã  jour \n  };\n\n  \n  // componentDidMount() {\n  //   this.addGarden(this.SIZE_GARDEN);\n  // }\n\n  // componentDidUpdate() {\n  //   console.log(\"farm:\", this.state.farm);\n  // }\n\n  render() {\n    return (\n      <>\n      <div class=\"flexContainer\">\n        {this.state.farm.map((elem) => {\n          // on fait une boucle sur le state farm qui contient nos gardens\n          return <Garden garden={elem} />;\n        })}\n        {/* </div> */}\n        \n        {/* <div class=\"Plant\"> */}\n        </div>\n        <button class=\"boutonAdd\" onClick={() => this.addGarden(this.SIZE_GARDEN)}>Add Garden</button>\n        \n        \n      </>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}